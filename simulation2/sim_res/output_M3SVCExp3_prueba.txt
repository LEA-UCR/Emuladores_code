> # if you are working local, setwd in simulation2 first!
> args = commandArgs(trailingOnly=TRUE)
> if(length(args)==0){
+   i<-3
+   type<-"Exponential"
+   model<-"SVC"
+   analysis<-"M3"
+   datasetfile=paste0("sim_data/dataset",model,type,i,".Rdata")
+ } else {
+   i<-args[1]
+   type<-args[2]
+   model<-args[3]
+   analysis<-args[4]
+   datasetfile=paste0("sim_data/dataset",model,type,i,".Rdata")
+ }
> 
> # i<-1:100
> # type<-'Exponential', "Matern"
> # model<-'SVC', "SVI"
> # analysis<-"M1: likelihood", "M2: Banerjee", "M3: FSA"
> 
> source("1.MRA_resolution_general.R")
> source('covariances.R')
> source('likelihoodK_general.R')
> library(MCMCpack)
> library(truncdist)
> library(invgamma)
> 
> aa<-gen_resolution(datasetfile)
Joining, by = c("iK1", "iK2", "iK3")
Joining, by = c("iK1", "iK2")
Joining, by = "iK1"
Joining, by = c("iK1", "iK2", "iK3", "iK4")
[1] "El numero de nodos X particion es: 2"
Joining, by = "iP2"
Joining, by = "iP3"
> bordes<-aa[[1]];indicesW<-aa[[2]];knotsMRA<-aa[[3]]
> nn<-aa[[4]];hh<-aa[[5]]
> 
> #### Metropolis Hastings
> 
> # initial values
> 
> phi <- 0.9
> beta0 <- 0
> beta1 <- 2
> 
> startvalue <- c(phi,beta0,beta1)
> N <- dim(hh)[1]
> npar <- length(startvalue)
> 
> # fixed
> taub <- 1
> taue <- 5
> nu <- 1
> 
> 
> ##################
> # L functions    #
> ##################
> 
> f <- function(param) {
+   phi <- param[1]
+   beta0 <- param[2]
+   beta1 <- param[3]
+   sigma2 <- 1/taub
+   if (analysis=="M1"){
+     loglike <- likelihoodGaussian(nu,phi,beta0,
+                   beta1,sigma2,taue,model,type)
+     }else{
+       if (analysis=="M2"){
+     loglike <- likelihoodBanerjee(nu,phi,beta0,
+                   beta1,sigma2,taue,model,type)
+       }else {
+     loglike <- likelihoodFSA_Block(nu,phi,beta0,
+                   beta1,sigma2,taue,model,type)}}
+   #loglike <- likelihood(nu,phi,beta0,beta1,1/taub,taue,model,type)
+   ## incluir previas para taue y taub (según Demirhan et al)
+   #logpriortaue <- (dgamma(taub,shape=0.5, scale=2, log=T))
+   #logpriortaub <- dgamma(taub,shape=5, scale=2, log=T)
+   logpriorphi <- dunif(phi,0.80,1.00,log=TRUE) 
+   logpriorbeta0 <- dnorm(0,1,log=TRUE)
+   logpriorbeta1 <- dnorm(2,1,log=TRUE)
+   logprior <- logpriorphi+logpriorbeta0+logpriorbeta1
+   like <- -(loglike/2) +logprior
+   return(like)
+ }
> 
> ##################
> # Main M-H  loop #
> ##################
> 
> 
> th <- c(0.01,0.01,0.01)
> 
> proposalfunction <- function(param,i,th){
+   if (is.null(dim(param)[1])){
+     sd <- th
+     mu <- param
+   }else{
+     sd <- apply(param,2,sd)
+     if (sum(sd) < 0.0001){
+       sd <- th
+     }else{
+       sd <- sd
+     }
+     mu <- param[i,]
+   }
+   #alpha <- c(mu[1]^2/(th[1]*sd[1]))
+   #beta  <- c(th[1]*sd[1]/mu[1])
+   Yn <- c(#rgamma(1,shape=alpha[1],scale=beta[1]),
+           runif(1,0.8,1),
+           rnorm(1,mu[2],sd[2]),
+           rnorm(1,mu[3],sd[3]))
+   return(Yn)
+   #return(list(Yn,alpha,beta))
+ }
> 
> #metrop(f, startvalue, 10000)
> 
> run_metropolis_MCMC <- function(startvalue, iterations){
+   chain = array(dim = c(iterations+1,npar))
+   chain[1,] = startvalue
+   for (i in 1:iterations){
+     # iterations <- 10000;i<-1
+     ## Decision
+     proposal <- proposalfunction(chain[c(1:i),],i,th)
+     #proposal <- proposal_all[[1]]
+     #alpha <- proposal_all[[2]]
+     #beta <- proposal_all[[3]]
+     probab <- min(0,
+     f(proposal) -
+     #+ dgamma(chain[i,1],alpha[1],beta[1], log=TRUE)-
+       f(chain[i,]) )
+     #- dgamma(proposal[1],alpha[1],beta[1], log=TRUE))
+     alphan <- exp(probab)
+     if (log(runif(1)) <= probab){
+       chain[i+1,] = proposal
+     }else{
+       chain[i+1,] = chain[i,]
+     }
+     if(i%%100==0){
+     print(round(c(i, alphan, chain[i+1,]),4))
+     }
+   }
+   return(chain)
+ }
> 
> print(datasetfile)
[1] "sim_data/datasetSVCExponential3.Rdata"
> 
> start_time <- Sys.time()
> 
> set.seed(100)
> chain = run_metropolis_MCMC(startvalue, 4000)

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

The following object is masked from ‘package:spam’:

    det


Attaching package: ‘igraph’

The following objects are masked from ‘package:dplyr’:

    as_data_frame, groups, union

The following object is masked from ‘package:tidyr’:

    crossing

The following objects are masked from ‘package:purrr’:

    compose, simplify

The following object is masked from ‘package:raster’:

    union

The following object is masked from ‘package:evd’:

    clusters

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

[1] 100.0000   0.0557   0.8008  -0.0219   1.8266
[1] 200.0000   0.1645   0.8356  -0.0380   1.7525
[1] 300.0000   0.1112   0.8175  -0.0633   1.9241
[1] 400.0000   1.0000   0.8982   0.0184   1.8523
[1] 500.0000   1.0000   0.8162  -0.0316   1.8122
[1] 600.0000   0.0257   0.9224  -0.0876   1.8105
[1] 700.0000   0.0739   0.9430  -0.0057   1.7846
[1] 800.0000   0.0607   0.8279  -0.0987   1.8332
[1] 900.0000   1.0000   0.8397  -0.0220   1.8256
[1] 1000.0000    0.6095    0.9247   -0.0356    1.8461
[1] 1100.0000    0.0027    0.8106    0.0138    1.7553
[1] 1200.0000    1.0000    0.8296   -0.0817    1.7872
[1] 1300.0000    0.2271    0.8727   -0.0266    1.8123
[1] 1400.0000    1.0000    0.8530   -0.0212    1.8526
[1] 1500.0000    1.0000    0.9051   -0.0278    1.8008
[1] 1600.0000    0.0041    0.8049    0.0114    1.7565
[1] 1700.0000    0.0705    0.8731    0.0159    1.8136
[1] 1800.0000    0.1148    0.8600    0.0054    1.8800
[1] 1900.0000    0.8994    0.9256   -0.0073    1.8091
[1] 2000.0000    0.0426    0.8369   -0.0617    1.7985
[1] 2100.0000    1.0000    0.8891   -0.0075    1.8430
[1] 2200.0000    0.1049    0.9208   -0.0963    1.8058
[1] 2300.0000    0.2873    0.9480   -0.0689    1.7506
[1] 2400.0000    0.5691    0.8541   -0.0581    1.7229
[1] 2500.0000    0.3026    0.8426   -0.0445    1.8065
[1] 2600.0000    0.0071    0.8901   -0.0606    1.7781
[1] 2700.0000    0.7393    0.8419   -0.0029    1.9147
[1] 2800.0000    0.3878    0.9642   -0.0729    1.7727
[1] 2900.0000    1.0000    0.8392    0.0121    1.8395
[1] 3000.0000    0.0021    0.8077   -0.0334    1.7877
[1] 3100.0000    0.0307    0.8334   -0.1282    1.8567
[1] 3200.0000    1.0000    0.8510   -0.0201    1.8168
[1] 3300.0000    0.9993    0.9606   -0.0330    1.8682
[1] 3400.0000    0.2490    0.8008    0.0044    1.8606
[1] 3500.0000    0.4649    0.8158    0.0164    1.8815
[1] 3600.0000    0.2122    0.8679   -0.0461    1.8435
[1] 3700.0000    0.5372    0.9045   -0.0649    1.8409
[1] 3800.0000    0.2703    0.8630   -0.0553    1.8574
[1] 3900.0000    0.1437    0.9253   -0.0101    1.8941
[1] 4000.0000    0.3475    0.8808   -0.0497    1.7918
> burnIn = 50
> acceptance = 1-mean(duplicated(chain[-(1:burnIn),]));acceptance
[1] 0.4378638
> 
> end_time <- Sys.time()
> 
> print(end_time-start_time)
Time difference of 1.298077 hours
> 
> ### Summary: #######################
> 
> png(filename=paste0("sim_res/plot",analysis,model,type,i,".png"))
> par(mfrow = c(2,npar))
> hist(chain[-(1:burnIn),1],nclass=30, main="Posterior of phi", xlab="True value = red line")
> abline(v = mean(chain[-(1:burnIn),1]), col="green")
> abline(v = 0.9, col="red" )
> hist(chain[-(1:burnIn),2],nclass=30, main="Posterior of beta0", xlab="True value = red line")
> abline(v = mean(chain[-(1:burnIn),2]), col="green")
> abline(v = 0, col="red" )
> hist(chain[-(1:burnIn),3],nclass=30, main="Posterior of beta1", xlab="True value = red line")
> abline(v = mean(chain[-(1:burnIn),3]), col="green")
> abline(v = 2, col="red" )
> plot(chain[-(1:burnIn),1], type = "l", xlab="True value = red line" , main = "Chain values of phi", )
> abline(h = 0.9, col="red" )
> plot(chain[-(1:burnIn),2], type = "l", xlab="True value = red line" , main = "Chain values of beta0", )
> abline(h = 0, col="red" )
> plot(chain[-(1:burnIn),3], type = "l", xlab="True value = red line" , main = "Chain values of beta1", )
> abline(h = 2, col="red" )
> dev.off()
null device 
          1 
> 
> save(chain, file=paste0("sim_res/chain",analysis,model,type,i,".Rdata"))
> 